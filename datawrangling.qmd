---
title: "Untitled"
format: html
---

```{r}
library(tidyverse)
library(ggplot2)
library(plotly)
library(GGally)
library(tidyr)
library(sf)
```

```{r, message = FALSE, warning=FALSE}
data1 <- read_csv("data/gni_gdp_lifeexp.csv", na = c(".."))
data2 <- read_csv("data/expected_years_of_schooling.csv", na = c(".."))
```

```{r}
#| echo: false
data <- rbind(data1, data2)
```

```{r}
for (year in 2000:2022) {
  old_name <- paste0(year, " [YR", year, "]")
  new_name <- as.character(year)
  names(data)[names(data) == old_name] <- new_name
}

start_year <- 2000
end_year <- 2022
data <- data %>%
  filter(if_any(`2000`:`2022`, ~ !is.na(.)))

data0 <- data %>%
  select(-c(`Country Code`, `Series Code`)) %>% 
  rename("Country" = "Country Name",
         "variable" = "Series Name"
  )

data0 <- data0 %>% 
  pivot_longer(cols = starts_with("20"),
               names_to = "year",
               values_to = "value")

data3 <- data0 %>% 
  pivot_wider( names_from = variable,
               values_from = value)

macro_trends <- data3 %>% 
  rename(
    "life_exp" = "Life expectancy at birth, total (years)",
    "gni" = "GNI per capita (constant 2015 US$)",
    "gdp" = "GDP per capita (constant 2015 US$)",
    "yrs_sch" = "Expected years of schooling"
  )
```

```{r}
#| label: impute-missing

library(mice)

# change variabl types so all included in mice for imputation
macro_trends <- macro_trends |>
  mutate(Country = as.factor(Country)
        , year = parse_number(year))

# visualize missingness patterns
md.pattern(macro_trends, rotate.names = TRUE)
naniar::vis_miss(macro_trends)

imp <- mice(macro_trends)
imp

check <- complete(imp, "broad")
imp_dat <- complete(imp, "long")

imp_dat_avg <- imp_dat |>
  group_by(Country, year) |>
  summarize(across(c(life_exp, gni, gdp, yrs_sch), ~ mean(.)
                   , .names="{col}_mean")
            , across(c(life_exp, gni, gdp, yrs_sch), ~ min(.)
                     , .names="{col}_min")
            , across(c(life_exp, gni, gdp, yrs_sch), ~ max(.)
                     , .names="{col}_max")
            , across(c(life_exp, gni, gdp, yrs_sch), ~ sd(.)
                     , .names="{col}_sd")) |>
  select(Country, year, starts_with("gdp"), starts_with("life_exp"))

# keep mean for simplicity / for class project 
# do ***NOT*** do this in real life
macro_trends_imp <- imp_dat |>
  group_by(Country, year) |>
  summarize(across(c(life_exp, gni, gdp, yrs_sch), ~ mean(.)))

write_csv(macro_trends, "data/macro_trends_imp.csv")
```

```{r}

set.seed(231)  
k_value <- 4  

latest_data <- macro_trends_imp %>%
  group_by(Country) %>%
  filter(year == max(year))  

# Select the variables for clustering
cluster_data <- latest_data[, c("life_exp","gdp", "gni", "yrs_sch")]

# Standardizing variables
scaled_data <- scale(cluster_data)

# Performing k-means clustering
kmeans_result <- kmeans(scaled_data, centers = k_value)

# Adding cluster information to the original data
macro_trends_with_clusters <- cbind(macro_trends, cluster = as.factor(kmeans_result$cluster))
```

```{r}
# Clustering Visualization

set.seed(231)

# Scaling variables
macro_trends_imp_scaled <- macro_trends_imp %>%
  mutate(across(where(is.numeric),  ~scale(.)[,1], .names = "{.col}_scaled")) %>%
  select(Country, year, life_exp_scaled, gni_scaled, yrs_sch_scaled)

df <- select(filter(macro_trends_imp_scaled, year == max(year)), life_exp_scaled, gni_scaled, yrs_sch_scaled)
df$cluster = factor(kmeans(select(ungroup(df), -Country), 4)$cluster)

library(plotly)
library(dplyr)
p <- plot_ly(df, x=~life_exp_scaled, y=~gni_scaled, 
z=~yrs_sch_scaled, color=~cluster) %>%
  layout(title = 'Human Development Index Indicators (2022)', scene = list(xaxis = list(title = 'Birth Life Expectancy (yrs)'), 
         yaxis = list(title = 'GNI per capita'), zaxis = list(title = 'Expected Years of Schooling (%)')))%>% 
     add_markers(size=1.5)
print(p)

# Exported Data for Shiny implementation
write.csv(df, "data/shiny.csv")
```

```{r}
# Cluster Map Data
world_map <- maps::map("world", plot = FALSE, fill = TRUE) %>%
  st_as_sf()

# Standartizing Country Names
old_names <- c("Bahamas, The", "Cabo Verde", "Czechia", "Congo, Dem. Rep.", "Egypt, Arab Rep.", "Gambia, The", "Korea, Rep.",
               "Kyrgyz Republic", "Iran, Islamic Rep.", "Lao PDR", "Moldova", "Congo, Rep.",
               "Russian Federation", "Slovak Republic", "Syrian Arab Republic",
               "Turkiye", "United States",
               "United Kingdom", "Venezuela, RB", "British Virgin Islands", "Virgin Islands (U.S.)", "	
Yemen, Rep.")
new_names <- c("Bahamas", "Cape Verde", "Czech Republic", "Democratic Republic of the Congo", "Egypt", "Gambia",
               "South Korea", "Kyrgyzstan", "Iran", "Laos", "Moldovia", "Republic of Congo", "Russia", "Slovakia",
               "Syria", "Turkey", "USA", "UK", "Venezuela", "Virgin Islands, British", "Virgin Islands, US", "Yemen")

for (i in 1:length(new_names)){
  world_map$ID[world_map$ID == new_names[i]] <- old_names[i]
}

# Merging Country clusters with their spatial information
leaflet_data <- select(df, Country, cluster) %>%
  inner_join(world_map, by = c("Country"="ID"))
```

```{r}
# Cluster Mapping
p <- ggplot(leaflet_data, aes(geometry=geom, fill = cluster)) +
      geom_sf() +
      theme_void() +
      labs(fill = "Clusters"
           , title = "Countries Clustered Over HDI Indicators") +
      scale_fill_brewer(palette = "Pastel2")  

p
```

```{r}
# Test-Train data split for prediction model
train <- macro_trends_imp %>%
  filter(year < 2019)

test <- macro_trends_imp %>%
  filter(year >= 2019)
```

```{r}
# Training the prediction algorithm
fit <- lm(gdp ~ gni + yrs_sch + life_exp, data = train)
summary(fit)
```

```{r}
# Testing the prediction algorith
test$prediction <- predict(fit, select(ungroup(test), gni, yrs_sch, life_exp))

test %>%
  select(gdp, prediction)
```

```{r}
# Error calculation for the model
test$prediction <- predict(fit, newdata = select(ungroup(test), gni, yrs_sch, life_exp))

# prediction error
test$error <- abs(test$gdp - test$prediction)

# comparison
predictions_df <- test %>%
  select(gdp, prediction, error)

predictions_df_sorted <- predictions_df %>%
   arrange(error)
 # arrange(desc(error))

predictions_df_sorted


```

```{r}
predictors <- c("gni", "yrs_sch", "life_exp")

results <- data.frame()

for (variable in predictors) {
  # linear regression model
  fit_individual <- lm(gdp ~ get(variable), data = train)
  
  # Make predictions on the test set
  test$prediction_individual <- predict(fit_individual, newdata = test)
  
  mse <- mean((test$gdp - test$prediction_individual)^2)
  rmse <- sqrt(mse)
  
  result <- data.frame(
    Variable = variable,
    MSE = mse,
    RMSE = rmse
  )
  
  results <- rbind(results, result)  
  
  p_individual <- ggplot(test, aes_string(x = variable, y = "gdp", color = "prediction_individual")) +
    geom_point(size = 3) +
    geom_smooth(method = "lm", se = FALSE, color = "blue") +
    labs(title = paste("Prediction vs. Actual (", variable, ")", sep = ""),
         x = variable,
         y = "GDP") +
    theme_minimal()
  
  print(p_individual)
}

results

```

## Interpretation

The training data is split by year, assigning observations before 2019 to the training set. Using predictors - Gross National Income (gni), Years of Schooling (yrs_sch), and Life Expectancy (life_exp), a linear regression model is fitted to this training set. The model predicts larger GDP values, evident in low Mean Squared Error (MSE) and Root Mean Squared Error (RMSE) for variables like gni. However, it needs to improve with precision in predicting smaller GDP values, a discrepancy reflected in both evaluation metrics and individual plots.

In the linear regression analysis on GDP, predictors such as gni and yrs_sch exhibit strong positive effects, while life_exp shows a weaker negative impact. The R-squared value of 0.7036 indicates that the model explains approximately 70.36% of GDP variability. Individual evaluation for each predictor highlights varying prediction accuracies, with gni having an MSE of 221,308,719 and an RMSE of 14,876.45.

The model's reduced accuracy in predicting GDP for smaller countries may result from several factors. Smaller economies tend to be more volatile and susceptible to external factors, posing challenges for accurate modeling. Limited data points for smaller countries resulted in less reliable estimations of predictor-GDP relationships. Moreover, factors specific to smaller nations, like regional dependencies or unique economic structures, need to be adequately captured by chosen predictors, affecting the model's predictive capability.
